buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
group = "celestialwizardry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CelestialWizardry"

// Define properties file
ext.configFile = file "build.properties"

// Load config. It shall from now be referenced simply as config or project.config.
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

configurations {
    deployerJars
}


dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

// Finds and sets version data.
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (project.hasProperty("CelestialWizardry.signing")
            && new File(project.property("CelestialWizardry.signing")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("CelestialWizardry.signing"))))

        if (Boolean.valueOf((String) props['release'])) {
            ext.buildNum = "alpha." + props['build_number']
        } else {
            ext.buildNum = "DEV.${project.buildInfo.revision}"
        }

    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}

if (project.hasProperty("CelestialWizardry.signing")
        && new File(project.property("CelestialWizardry.signing")).exists()) {

    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("CelestialWizardry.signing"))))

    if (Boolean.valueOf((String) props['release'])) {
	
        ext.artifact_version = "${config.mod_version}-${project.buildInfo.buildNum}"
		
    } else {
	
        ext.artifact_version = "${project.buildInfo.buildNum}"
		
    }

} else {

    ext.artifact_version = "${project.buildInfo.buildNum}"
	
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = 'eclipse/assets' // TODO Change to run/assets with next forge update
    replace '${version}', project.version

    replaceIn "reference/Reference.java"
    if (project.hasProperty("CelestialWizardry.signing")
            && new File(project.property("CelestialWizardry.signing")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("CelestialWizardry.signing"))))

        println "Valid jar fingerprint properties found"

        replace "@FINGERPRINT@", props['signature']
    }

    replaceIn "reference/Version.java"
        replace "@VERSION@", artifact_version
}

processResources
        {
            // Replace values only in mcmod.info.
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // Replace version and mcversion.
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // Copy everything excluding mcmod.info.
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// Create deobf dev jars.
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API jar.
task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "celestialwizardry/api/*"
    }
    classifier = 'api'
}

artifacts {
    archives deobfJar
    archives apiJar
}

if (project.hasProperty("CelestialWizardry.signing")
        && new File(project.property("CelestialWizardry.signing")).exists()) {

    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("CelestialWizardry.signing"))))

    ext.keystore_location = file(props['keystore_location'])
    ext.keystore_user_alias = props['keystore_alias']
    ext.keystore_user_password = props['keystore_password']

    println "Valid jar signing properties found"

} else {
    ext.keystore_location = "."
    ext.keystore_user_alias = ""
    ext.keystore_user_password = ""
}

task("signJar", dependsOn: "build")
        {
            inputs.file jar.getArchivePath()
            inputs.file keystore_location
            inputs.property "keystore_user_alias", keystore_user_alias
            inputs.property "keystore_user_password", keystore_user_password
            outputs.file jar.getArchivePath()

            // Only sign the jar if the keystore exists
            onlyIf {
                return keystore_location != "."
            }

            println "archive path >> " + jar.getArchivePath()
            println jar.getArchivePath()

            // Sign the jar.
            doLast {
                ant.signjar(
                        destDir: jar.destinationDir,
                        jar: jar.getArchivePath(),
                        keystore: keystore_location,
                        alias: keystore_user_alias,
                        storepass: keystore_user_password,
                        keypass: keystore_user_password
                )
            }
        }

// TODO Include uploading to server here
task("release", dependsOn: "signJar")
        {

        }
