/**
 * CelestialWizardry
 * Master build file
 *
 * @author PizzAna
 */
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "cg"
            url = uri('../CelestialGradle/maven/') // "https://raw.githubusercontent.com/PizzAna/CelestialGradle/master/maven/"
        }
    }
    dependencies {
        classpath 'io.github.pizzana:CelestialGradle:0.1-SNAPSHOT'
    }
}

// import static io.github.pizzana.celestialgradle.CelestialPlugin.*;

apply plugin: 'maven'
apply plugin: 'signing'
// apply plugin: 'cw'
apply plugin: 'forge'

group 'io.github.pizzana'
archivesBaseName = project.getName()
// TODO Remove that System.getenv (potential NPE)
version = "0.1-DEV.${System.getenv().BUILD_NUMBER}" // getVersionFromJava(getProject(), "VERSION")

ext.mc = "1.7.2" // getVersionFromJava(getProject(), "MINECRAFT")
ext.forge = "10.12.2.1121" // getVersionFromJava(getProject(), "FORGE")
ext.baubles = "1.0.0.16" // getVersionFromJava(getProject(), "BAUBLES")
ext.baubles_root = "https://dl.dropboxusercontent.com/u/47135879/" // getPropertyFromJava(getProject(), "src/main/java/celestialwizardry/reference/Reference.java", "BAUBLES_ROOT")

minecraft {
    version = project.mc + "-" + project.forge
    assetDir = "run/assets"
}

version = project.mc + project.version

processResources {
    inputs.property "version", project.version
    inputs.property "mc_version", project.mc
    inputs.property "baubles_version", project.baubles
    inputs.property "baubles_root", project.baubles_root

    exclude '**/*.xcf'

    from(sourceSets.main.resources.srcDirs) {
        include '*.info'

        expand 'version': project.version, 'mc_version': project.mc, 'baubles_version': project.baubles, 'baubles_root': project.baubles_root
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

signing {
    sign configurations.archives
}

uploadArchives {
    /* repositories {
        if (project.hasProperty("releases") && project.hasProperty("snapshots"))
        {
            mavenDeployer {
                beforeDeployment {MavenDeployment deployment -> signing.signPom(deployment)}

                repository(url: project.releases) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: project.snapshots) {
                    authentication(userName: project.ossrhUsername, password: project.ossrhPassword)
                }

                pom.project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'CelestialWizardry'
                    url 'https://github.com/PizzAna/CelestialWizardry'

                    scm {
                        url 'https://github.com/PizzAna/CelestialWizardry'
                        connection 'scm:git:git://github.com/PizzAna/CelestialWizardry.git'
                        developerConnection 'scm:git:git@github.com:PizzAna/CelestialWizardry.git'
                    }

                    issueManagement {
                        system 'github'
                        url 'https://github.com/PizzAna/CelestialWizardry/issues'
                    }

                    licenses {
                        license {
                            name 'GNU GENERAL PUBLIC LICENSE v2'
                            url 'http://www.gnu.org/licenses/gpl-2.0.html'
                        }
                    }

                    developers {
                        developer {
                            id 'PizzAna'
                            name 'PizzAna'
                            roles {role 'developer'}
                        }
                        developer {
                            id 'le683'
                            name 'Okkapel'
                            roles {role 'developer'}
                        }
                    }
                }
            }
        }
    } */
}
