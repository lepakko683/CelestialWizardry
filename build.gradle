buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
group = "celestialwizardry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}


dependencies {
    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

// Finds and sets version data
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "jenkins${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "dev.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    assetDir = 'eclipse/assets' // TODO Change to run/assets
    replace '${version}', project.version
}

processResources
        {
            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Create API jar
task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "celestialwizardry/api/*"
    }
    classifier = 'api'
}

artifacts {
    archives deobfJar
    archives apiJar
}

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore location
    ext.keystore_location = ".";
if (!project.hasProperty("keystore_user_alias")) // keystore user alias
    ext.keystore_user_alias = "";
if (!project.hasProperty("keystore_user_password")) // keystore user pass
    ext.keystore_user_password = "";

task("signJar", dependsOn: "build")
        {
            inputs.file jar.getArchivePath()
            inputs.file keystore_location
            inputs.property "keystore_user_alias", keystore_user_alias
            inputs.property "keystore_user_password", keystore_user_password
            outputs.file jar.getArchivePath()

            // only sign if the keystore exists
            onlyIf {
                return keystore_location != "."
            }
            println "archive path >> " + jar.getArchivePath()
            println jar.getArchivePath()
            // the actual action.. sign the jar.
            doLast {
                ant.signjar(
                        destDir: jar.destinationDir,
                        jar: jar.getArchivePath(),
                        keystore: keystore_location,
                        alias: keystore_user_alias,
                        storepass: keystore_user_password,
                        keypass: keystore_user_password
                )
            }
        }
